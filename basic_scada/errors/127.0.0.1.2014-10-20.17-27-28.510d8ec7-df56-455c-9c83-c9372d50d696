(dp1
S'output'
p2
S"<class 'serial.serialutil.SerialException'> Port is already open."
p3
sS'layer'
p4
S'/home/francisco/web2py/applications/basic_scada/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport math\nimport datetime\nimport serial \nimport time\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\n\ndef recibe_datos():\n    operando1=int(request.vars.operando1)\n    resultado=math.pow(operando1, 3)\n    return resultado\n\n\ndef abrir_puerta():\n\n\tprint ("Primer punto")\n\tpuerta_Serie_1=serial.Serial(\'/dev/ttyACM0\',9600)\n\n\tprint ("Segundo punto")\n\tpuerta_Serie_1.open()\n\n\n\tprint ("puerto abierto")\n\tapertura=int(request.vars.entrada)\n\tprint apertura\n\tif apertura == 1:\n\t\ton = \'a\'\n\tprint on\n\tpuerta_Serie_1.write(on)\n\n\tprint ("ya esta escrito")\n\tpuerta_Serie_1.close()\t\n\n\n\treturn on\n\t\ndef cerrar_puerta():\n\n\tprint ("Primer point")\n\tpuerta_Serie_2=serial.Serial(\'/dev/ttyACM0\',9600)\n\tprint ("Segundo point")\n\tpuerta_Serie_2.open()\n\n\tprint ("puerto open")\n\tcierre=int(request.vars.cierre)\n\tprint cierre\n\tif cierre == 1:\n\t\ton = \'b\'\n\tprint on\n\tpuerta_Serie_2.write(on)\n\n\tpuerta_Serie_2.close()\t\n\treturn on\n    \ndef mayor_de_2():\n\toperando1=int(request.vars.operando1)\n\toperando2=int(request.vars.operando2)\n\tif operando1>operando2:\n\t\tresultado=operando1\n\telse:\n\t\tresultado=operando2\n\treturn resultado\n\t\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(abrir_puerta)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/francisco/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/francisco/web2py/applications/basic_scada/controllers/default.py", line 139, in <module>\n  File "/home/francisco/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/francisco/web2py/applications/basic_scada/controllers/default.py", line 41, in abrir_puerta\n    puerta_Serie_1.open()\n  File "/usr/lib/python2.7/dist-packages/serial/serialposix.py", line 271, in open\n    raise SerialException("Port is already open.")\nSerialException: Port is already open.\n'
p11
s.