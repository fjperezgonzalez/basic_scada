(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: ''"
p3
sS'layer'
p4
S'/home/francisco/web2py/applications/basic_scada/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport math\nimport datetime\nimport serial \nimport time\nimport os\nimport string\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\n\n\n    \ndef recogida_datos():\n\t\n\ttry:\n\t\tdatos=open(\'/home/francisco/Escritorio/datos_bscada.txt\',\'r\')\n\t\tvalores=datos.read()\n\t\tdatos.close()\n\texcept:\n\t\tvalores="f500"\n\t\n\tdiccionario = {\'valores\': 0,\'on\': 1}\n\tprint diccionario\n\t\n\tlon_cadena = len(valores)\n\n\tif valores.find("z") == 0:\n\t\tdiccionario[\'on\'] = 0\n\tif valores.find("y") == 0:\t\n\t\tdiccionario[\'on\'] = 2\n\tprint "antes",valores\n\tvalores = valores[1:lon_cadena]\n\tprint "antes del int",valores\n\tprint "SEIS2"\n\tvalores = int(valores)\n\tprint "siete"\n\tdiccionario[\'valores\'] = valores\t\t\n\tprint diccionario\n\tprint "ocho"\n\t\n\treturn diccionario\n    \n\n\ndef abrir_puerta():\n\n\tdatos=open(\'/home/francisco/Escritorio/datos_bscada_2.txt\',\'w\')\n\tdatos.write("a")\t\n\tprint ("La puerta se abre",datos)\n\tapertura = datos\n\tdatos.close()\n\n\treturn apertura\n\t\ndef cerrar_puerta():\n\n\tdatos=open(\'/home/francisco/Escritorio/datos_bscada_2.txt\',\'w\')\n\tdatos.write("b")\t\n\tprint ("La puerta se cierra",datos)\n\tcierre = datos\n\tdatos.close()\n\n\treturn cierre\n    \n\n\t\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(recogida_datos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/francisco/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/francisco/web2py/applications/basic_scada/controllers/default.py", line 141, in <module>\n  File "/home/francisco/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/francisco/web2py/applications/basic_scada/controllers/default.py", line 55, in recogida_datos\n    valores = int(valores)\nValueError: invalid literal for int() with base 10: \'\'\n'
p11
s.